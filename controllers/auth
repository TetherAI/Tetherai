const {get404, getExpirePage, addErrorLog} = require('../utils/funcs')
const UserTable = require('../models/UserTable')

exports.home = async (req, res) => {
    return res.redirect('/login')
}

exports.registerForm = async (req, res) => {
    const {code} = req.query
    let codeExist
    if (code)
        codeExist = await UserTable.findOne({invited: code})
    if (codeExist)
        return res.render('register', {pageTitle: "Tether AI | Register", user: codeExist, url: '/register'})
    else
        return res.render('register', {pageTitle: "Tether AI | Register", user: null, url: '/register'})
}

exports.loginForm = async (req, res) => {
    let error = req.flash()
    if (Object.entries(error).length > 0 && !error.error[0].includes("your email verified successfully")) {
        let errors = [{name: "email", message: error.error[0]}]
        return res.status(422).send({status: 422, errors})
    }
    return res.render('login', {pageTitle: "Tether AI | Login", error, url: '/login'})
}

exports.forgetPasswordForm = async (req, res) => {
    return res.render("forgetPassword", {pageTitle: 'Tether AI | Forget Password', url: '/forget-password'})
}

exports.changePasswordForm = async (req, res) => {
    const {token} = req.params
    try {
        const user = await UserTable.findOne({passwordToken: token})
        if (user) {
            if (user.changePasswordTime > new Date()) {
                return res.render("changePassword", {
                    pageTitle: "Tether AI | Change Password",
                    token,
                    url: '/change-password'
                })
            } else {
                get404(res)
            }
        } else {
            get404(res)
        }
    } catch (err) {
        await addErrorLog(__filename, `${new Date().toLocaleDateString()} - ${new Date().toLocaleTimeString()} ==> error in changePasswordForm : ${err}\``)
        console.log(err)
        return false
    }
}

exports.verifyEmail = async (req, res) => {
    const {token} = req.params
    try {
        let user = await UserTable.findOne({verify: token})
        if (user.timeVerify > new Date()) {
            if (user.verify === token) {
                user.timeVerify = new Date()
                user.verify = null
                user.save()
                res.locals.message = req.flash("error", "your email verified successfully. now you can login")
                return res.redirect(`/login`)
            }
        } else {
            getExpirePage(res)
        }
    } catch (err) {
        await addErrorLog(__filename, `${new Date().toLocaleDateString()} - ${new Date().toLocaleTimeString()} ==> error in verifyEmail : ${err}\``)
        getExpirePage(res)
    }

}

exports.logout = (req, res) => {
    req.logout(function (err) {
        if (err) {
            return next(err)
        }
        res.redirect(`/login`)
    })
}
